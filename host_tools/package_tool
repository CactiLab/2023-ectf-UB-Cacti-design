#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

# @file package_tool
# @author Zheyuan Ma
# @brief host tool for packaging a feature for a fob
# @date 2023

import os
import argparse
import secrets
from pathlib import Path
from mbedtls import pk

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number, secrets_folder, package_dir):
    
    # Create package to match defined structure on fob
    package_message_bytes = (
        car_id.to_bytes(1, "little")
        + feature_number.to_bytes(1, "little")
        + secrets.token_bytes(8)
    )
    print("Package: ", bytes.hex(package_message_bytes))
    
    rsa = pk.RSA.from_file(os.path.join(secrets_folder, "feature_priv.der"))
    sig = rsa.sign(package_message_bytes)
    
    print("Signature: ", bytes.hex(sig))
    print("Signature length: ", len(sig))
    
    # rsa_pub = pk.RSA.from_file(os.path.join(secrets_folder, "feature_pub.der"))
    # result = rsa_pub.verify(package_message_bytes, sig, digestmod="SHA256")
    # print("Verification result: ", result)
    
    package_bytes = package_message_bytes + sig
    
    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    package_file = Path(os.path.join(package_dir, package_name))
    package_file.write_bytes(package_bytes)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=int, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )
    
    parser.add_argument(
        "--secrets-folder",
        help="Folder containing secrets",
        default="/secrets",
        type=str,
        required=False,
    )
    
    parser.add_argument(
        "--package-folder",
        help="Output folder for package",
        default="/package_dir",
        type=str,
        required=False,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number, args.secrets_folder, args.package_folder)


if __name__ == "__main__":
    main()
